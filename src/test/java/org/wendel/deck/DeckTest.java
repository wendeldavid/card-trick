package org.wendel.deck;

import org.junit.jupiter.api.Test;
import org.wendel.card.Card;
import org.wendel.card.Suit;

import java.util.List;
import java.util.Stack;

import static org.junit.jupiter.api.Assertions.*;

// Generated by CodiumAI
public class DeckTest {


    // Deck can be initialized with three stacks of cards
    @Test
    public void test_initialize_deck_with_three_stacks() {
        Stack<Card> col1 = new Stack<>();
        Stack<Card> col2 = new Stack<>();
        Stack<Card> col3 = new Stack<>();
        Deck deck = new Deck(col1, col2, col3);
    
        assertNotNull(deck);
    }

    // getColumn method returns a list of cards from the specified column
    @Test
    public void test_get_column_returns_list_of_cards() {
        Stack<Card> col1 = new Stack<>();
        Stack<Card> col2 = new Stack<>();
        Stack<Card> col3 = new Stack<>();
        col1.push(new Card(1, Suit.HEARTS));
        col1.push(new Card(2, Suit.DIAMONDS));
        col2.push(new Card(3, Suit.CLUBS));
        col2.push(new Card(4, Suit.SPADES));
        col3.push(new Card(5, Suit.HEARTS));
        col3.push(new Card(6, Suit.DIAMONDS));
        Deck deck = new Deck(col1, col2, col3);
    
        List<Card> column = deck.getColumn(1);
    
        assertEquals(2, column.size());
        assertEquals(new Card(1, Suit.HEARTS), column.get(0));
        assertEquals(new Card(2, Suit.DIAMONDS), column.get(1));
    }

    // toString method returns a string representation of the deck
    @Test
    public void test_toString_returns_string_representation() {
        Stack<Card> col1 = new Stack<>();
        Stack<Card> col2 = new Stack<>();
        Stack<Card> col3 = new Stack<>();
        col1.push(new Card(1, Suit.HEARTS));
        col1.push(new Card(2, Suit.DIAMONDS));
        col2.push(new Card(3, Suit.CLUBS));
        col2.push(new Card(4, Suit.SPADES));
        col3.push(new Card(5, Suit.HEARTS));
        col3.push(new Card(6, Suit.DIAMONDS));
        Deck deck = new Deck(col1, col2, col3);
    
        String expected = "---------------\n" +
                          " c1 |  c2 |  c3\n" +
                          "---------------\n" +
                          " 1♥ |  3♣ |  5♥\n" +
                          " 2♦ |  4♠ |  6♦\n" +
                          "---------------\n";
    
        assertEquals(expected, deck.toString());
    }

    // getColumn method throws an exception if an invalid column number is specified
    @Test
    public void test_get_column_throws_exception_for_invalid_column_number() {
        Stack<Card> col1 = new Stack<>();
        Stack<Card> col2 = new Stack<>();
        Stack<Card> col3 = new Stack<>();
        Deck deck = new Deck(col1, col2, col3);
    
        try {
            deck.getColumn(4);
            fail("Expected RuntimeException to be thrown");
        } catch (RuntimeException e) {
            assertEquals("invalid choice: 4", e.getMessage());
        }
    }

    // toString method returns an empty string if the deck is empty
    @Test
    public void test_toString_returns_empty_string_for_empty_deck() {
        Stack<Card> col1 = new Stack<>();
        Stack<Card> col2 = new Stack<>();
        Stack<Card> col3 = new Stack<>();
        Deck deck = new Deck(col1, col2, col3);
    
        String expected = "---------------\n" +
                          " c1 |  c2 |  c3\n" +
                          "---------------\n" +
                          "---------------\n";
    
        assertEquals(expected, deck.toString());
    }

}